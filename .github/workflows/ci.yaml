# Copyright (c) 2023, Oracle Corporation and/or its affiliates.
#
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# ---------------------------------------------------------------------------
# Verrazzano GitHub Actions VMO Build.
# ---------------------------------------------------------------------------

name: VMO Build
run-name: Build the Verrazzano Monitoring Operator by @${{ github.actor }} ðŸš€

on:
  push:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CREATE_LATEST_TAG: 0
  OPERATOR_NAME: verrazzano-monitoring-operator
  DOCKERFILE_OPERATOR: docker-images/verrazzano-monitoring-operator/Dockerfile

  GOPATH: /home/runner/go

jobs:
  build:
    name: Build and Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Checkout VMO repo
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go environment
        uses: actions/setup-go@v4

      - name: Go repo path
        run: echo "GO_REPO_PATH=${{ env.GOPATH }}/src/github.com/verrazzano" >> "$GITHUB_ENV"

      - name: Setup continued
        run: |
          rm -rf ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator
          mkdir -p ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator
          tar cf - . | (cd ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator/ ; tar xf -)

      # Get VMO image name for developer branches
      - name: Get image name (developer)
        if: ${{ !github.ref_protected }}
        run: echo "IMAGE_NAME=${{ github.repository }}-temp" >> "$GITHUB_ENV"

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Generate image metadata
      - name: Generate metadata
        run: |
          echo $GOPATH
          echo "DEV_VERSION=$(grep verrazzano-development-version .verrazzano-development-version | cut -d= -f 2)" >> "$GITHUB_ENV"
          echo "TIME_STAMP=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_ENV"

      # Get VMO image tag
      - name: Get image tag
        run: |
          SHORT_COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "DOCKER_IMAGE_TAG=v${{ env.DEV_VERSION }}-${{ env.TIME_STAMP }}-$SHORT_COMMIT_SHA" >> "$GITHUB_ENV"

      # Check if latest tag should be used
      - name: Get latest tag
        if: github.ref_name == 'master'
        run: echo "CREATE_LATEST_TAG=1" >> "$GITHUB_ENV"

      # Check if the repo is clean after running generate
      - name: Check if repo is clean
        run: |
          make controller-gen-install
          make check-repo-clean

      # Build and push Docker image
      - name: Build and push
        if: env.CREATE_LATEST_TAG == 0
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator
          pull: true
          push: true
          no-cache: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          file: ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator/docker-images/${{ env.OPERATOR_NAME }}/Dockerfile
#          build-args: |
#            BUILDVERSION=${{ env.DEV_VERSION }}
#            BUILDDATE=${{ env.TIME_STAMP }}
#            EXTLDFLAGS="-s -w"

        # Build and push Docker image as latest
      - name: Build and push latest
        if: env.CREATE_LATEST_TAG == 1
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator
          pull: true
          push: true
          no-cache: true
          tags: |
            latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          file: ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator/docker-images/${{ env.OPERATOR_NAME }}/Dockerfile
#          build-args: |
#            BUILDVERSION=${{ env.DEV_VERSION }}
#            BUILDDATE=${{ env.TIME_STAMP }}
#            EXTLDFLAGS="-s -w"

      - name: golangci-lint Check
        run: |
          cd ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator
          make golangci-lint

#      - name: Third Party License Check
#
#      - name: Copyright Compliance Check

      - name: Unit Tests
        run: |
          cd ${{ env.GO_REPO_PATH }}/verrazzano-monitoring-operator
          make unit-test
          make -B coverage
          build/scripts/copy-junit-output.sh coverage.html

      # Upload build artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: ignore
          path: |
            '**/coverage.html'
            '**/*test-result.xml'

      - name: Slack notification
        if: failure()
        run: echo "got here"