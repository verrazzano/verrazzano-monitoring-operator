// Copyright (c) 2020, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/verrazzano/verrazzano-monitoring-operator/pkg/apis/vmcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VerrazzanoMonitoringInstanceLister helps list VerrazzanoMonitoringInstances.
type VerrazzanoMonitoringInstanceLister interface {
	// List lists all VerrazzanoMonitoringInstances in the indexer.
	List(selector labels.Selector) (ret []*v1.VerrazzanoMonitoringInstance, err error)
	// VerrazzanoMonitoringInstances returns an object that can list and get VerrazzanoMonitoringInstances.
	VerrazzanoMonitoringInstances(namespace string) VerrazzanoMonitoringInstanceNamespaceLister
	VerrazzanoMonitoringInstanceListerExpansion
}

// verrazzanoMonitoringInstanceLister implements the VerrazzanoMonitoringInstanceLister interface.
type verrazzanoMonitoringInstanceLister struct {
	indexer cache.Indexer
}

// NewVerrazzanoMonitoringInstanceLister returns a new VerrazzanoMonitoringInstanceLister.
func NewVerrazzanoMonitoringInstanceLister(indexer cache.Indexer) VerrazzanoMonitoringInstanceLister {
	return &verrazzanoMonitoringInstanceLister{indexer: indexer}
}

// List lists all VerrazzanoMonitoringInstances in the indexer.
func (s *verrazzanoMonitoringInstanceLister) List(selector labels.Selector) (ret []*v1.VerrazzanoMonitoringInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VerrazzanoMonitoringInstance))
	})
	return ret, err
}

// VerrazzanoMonitoringInstances returns an object that can list and get VerrazzanoMonitoringInstances.
func (s *verrazzanoMonitoringInstanceLister) VerrazzanoMonitoringInstances(namespace string) VerrazzanoMonitoringInstanceNamespaceLister {
	return verrazzanoMonitoringInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VerrazzanoMonitoringInstanceNamespaceLister helps list and get VerrazzanoMonitoringInstances.
type VerrazzanoMonitoringInstanceNamespaceLister interface {
	// List lists all VerrazzanoMonitoringInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.VerrazzanoMonitoringInstance, err error)
	// Get retrieves the VerrazzanoMonitoringInstance from the indexer for a given namespace and name.
	Get(name string) (*v1.VerrazzanoMonitoringInstance, error)
	VerrazzanoMonitoringInstanceNamespaceListerExpansion
}

// verrazzanoMonitoringInstanceNamespaceLister implements the VerrazzanoMonitoringInstanceNamespaceLister
// interface.
type verrazzanoMonitoringInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VerrazzanoMonitoringInstances in the indexer for a given namespace.
func (s verrazzanoMonitoringInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.VerrazzanoMonitoringInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VerrazzanoMonitoringInstance))
	})
	return ret, err
}

// Get retrieves the VerrazzanoMonitoringInstance from the indexer for a given namespace and name.
func (s verrazzanoMonitoringInstanceNamespaceLister) Get(name string) (*v1.VerrazzanoMonitoringInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("verrazzanomonitoringinstance"), name)
	}
	return obj.(*v1.VerrazzanoMonitoringInstance), nil
}
